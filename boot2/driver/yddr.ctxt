#define READ  1
#define WRITE 0
#define MC    0
#define PHY   1

typedef struct {
    unsigned char rw;
    unsigned char mcPhy;
    unsigned long long addr;
    unsigned int data;
} DDRCmd;

//mc  0x00_3106_0000-0x00_3106_FFFF
//phy 0x00_3107_0000-0x00_3107_FFF
DDRCmd cmds[] = 
{
  // mc config
  {WRITE, MC,  0x00130304, 0x00000001}, // DBG1
  {WRITE, MC,  0x00130030, 0x00000001}, // Self-Ref & Power Down
  {WRITE, MC,  0x00130000, 0x40040610}, // 2T timing
  {WRITE, MC,  0x00130010, 0x00000010}, // MR Control
  {WRITE, MC,  0x00130014, 0x0000465c}, // MR Data
  {WRITE, MC,  0x0013001c, 0xa2e0f445}, // MR PDA
  {WRITE, MC,  0x00130030, 0x00000088}, // Self-Ref & Power Down
  {WRITE, MC,  0x00130034, 0x000f0002}, // Self-Ref & Power Down Timing
  {WRITE, MC,  0x00130038, 0x006a0000}, // Hardware Low Power
  {WRITE, MC,  0x00130050, 0x00001060}, // 
  {WRITE, MC,  0x00130060, 0x00000000},
  {WRITE, MC,  0x00130064, 0x009200d3},
  {WRITE, MC,  0x001300c0, 0x00000000},
  {WRITE, MC,  0x001300c4, 0x00001010},
  {WRITE, MC,  0x001300d0, 0x00020027},
  {WRITE, MC,  0x001300d4, 0x00270006},
  {WRITE, MC,  0x001300dc, 0x0a310001},
  {WRITE, MC,  0x001300e0, 0x10180200},
  {WRITE, MC,  0x001300e4, 0x00110000},
  {WRITE, MC,  0x001300e8, 0x00000640},
  {WRITE, MC,  0x001300ec, 0x00000800},
  {WRITE, MC,  0x001300f0, 0x00000010},
  {WRITE, MC,  0x00130100, 0x110d2914}, // rw2pre, t_faw, t_rax_max, t_ras_min
  {WRITE, MC,  0x00130104, 0x0004051b}, // null, t_xp, rd2pre, t_rc
  {WRITE, MC,  0x00130108, 0x06080510}, // wl, rl, 
  {WRITE, MC,  0x0013010c, 0x0000f00f},
  {WRITE, MC,  0x00130110, 0x08030309},
  {WRITE, MC,  0x00130114, 0x0f0e0404},
  {WRITE, MC,  0x00130120, 0x06060e08},
  {WRITE, MC,  0x00130124, 0x0002020d},
  {WRITE, MC,  0x00130128, 0x000f0e05},
  {WRITE, MC,  0x0013012c, 0x14090112},
  {WRITE, MC,  0x00130130, 0x0c00000d},
  {WRITE, MC,  0x0013013c, 0x00000000},
  {WRITE, MC,  0x00130180, 0x51000040},
  {WRITE, MC,  0x00130184, 0x00000070},
  {WRITE, MC,  0x00130190, 0x048b820a},
  {WRITE, MC,  0x00130194, 0x01090606},
  {WRITE, MC,  0x00130198, 0x07008120},
  {WRITE, MC,  0x0013019c, 0x00000061},
  {WRITE, MC,  0x001301a0, 0x20400004},
  {WRITE, MC,  0x001301a4, 0x0003002e},
  {WRITE, MC,  0x001301a8, 0x00000000},
  {WRITE, MC,  0x001301b0, 0x00000041},
  {WRITE, MC,  0x001301b8, 0x00000000},
  {WRITE, MC,  0x001301c0, 0x00000001},
  {WRITE, MC,  0x001301c4, 0x00000000},
  {WRITE, MC,  0x00130204, 0x003f0007},
  {WRITE, MC,  0x00130208, 0x03000400},
  {WRITE, MC,  0x0013020c, 0x02020507},
  {WRITE, MC,  0x00130210, 0x00001f1f},
  {WRITE, MC,  0x00130214, 0x0b080709},
  {WRITE, MC,  0x00130218, 0x0406080b},
  {WRITE, MC,  0x0013021c, 0x00000f0f},
  {WRITE, MC,  0x00130220, 0x00000204},
  {WRITE, MC,  0x00130224, 0x02020107},
  {WRITE, MC,  0x00130228, 0x0704080a},
  {WRITE, MC,  0x0013022c, 0x00000007},
  {WRITE, MC,  0x00130240, 0x0f1e0264},
  {WRITE, MC,  0x00130244, 0x00000001},
  {WRITE, MC,  0x00130250, 0x1aa51704},
  {WRITE, MC,  0x00130254, 0x00000039},
  {WRITE, MC,  0x0013025c, 0x40001e0b},
  {WRITE, MC,  0x00130264, 0x2c006921},
  {WRITE, MC,  0x0013026c, 0x79001d5c},
  {WRITE, MC,  0x00130300, 0x00000001},
  {WRITE, MC,  0x00130304, 0x00000000},
  {WRITE, MC,  0x0013030c, 0x00000000},
  {WRITE, MC,  0x00130320, 0x00000001},
  {WRITE, MC,  0x00130328, 0x00000000},
  {WRITE, MC,  0x0013036c, 0x00000010},
  {WRITE, MC,  0x00130400, 0x00000010},
  {WRITE, MC,  0x00130404, 0x000023e7},
  {WRITE, MC,  0x00130408, 0x0000036e},
  {WRITE, MC,  0x00130490, 0x00000000},
  {WRITE, MC,  0x00130494, 0x00100005},
  // mc reset done
  //{READ ,0x00130ff4, 0x00000000},
  {READ , MC,  0x00130ff4, 0x67612a2a}, //read only
  // mc init
  {WRITE, MC,  0x00130304, 0x00000000},
  {WRITE, MC,  0x00130030, 0x00000088},
  {WRITE, MC,  0x00130030, 0x00000088},
  {WRITE, MC,  0x00130320, 0x00000000},
  {WRITE, MC,  0x001301b0, 0x00000040},
  // phy config
  {WRITE, PHY, 0x00140024, 0x0020403b},
  {WRITE, PHY, 0x00140148, 0x0f000009},
  {WRITE, PHY, 0x00140149, 0x00000309},
  {WRITE, PHY, 0x001401c4, 0x0e00003c},
  {WRITE, PHY, 0x00140204, 0x0e00003c},
  {WRITE, PHY, 0x00140244, 0x0e00003c},
  {WRITE, PHY, 0x00140284, 0x0e00003c},
  {WRITE, PHY, 0x001402c4, 0x0e00003c},
  {WRITE, PHY, 0x00140304, 0x0e00003c},
  {WRITE, PHY, 0x00140344, 0x0e00003c},
  {WRITE, PHY, 0x00140384, 0x0e00003c},
  {WRITE, PHY, 0x00140080, 0x3000b0c7},
  {WRITE, PHY, 0x0014014b, 0x0fc00172},
  {WRITE, PHY, 0x00140040, 0x2800040c},
  {WRITE, PHY, 0x00140022, 0x20c01884},
  {WRITE, PHY, 0x00140010, 0x5e001810},
  {WRITE, PHY, 0x00140011, 0x008005f0},
  {WRITE, PHY, 0x00140060, 0x00000a31},
  {WRITE, PHY, 0x00140061, 0x00000001},
  {WRITE, PHY, 0x00140062, 0x00000018},
  {WRITE, PHY, 0x00140063, 0x00000200},
  {WRITE, PHY, 0x00140064, 0x00000000},
  {WRITE, PHY, 0x00140065, 0x00000640},
  {WRITE, PHY, 0x00140080, 0x3000b0c7},
  {WRITE, PHY, 0x00140066, 0x00000800},
  {WRITE, PHY, 0x00140044, 0x0627100a},
  {WRITE, PHY, 0x00140045, 0x281a0408},
  {WRITE, PHY, 0x00140046, 0x00070380},
  {WRITE, PHY, 0x00140047, 0x02000101},
  {WRITE, PHY, 0x00140048, 0x01cd0608},
  {WRITE, PHY, 0x00140049, 0x0036100a},
  {WRITE, PHY, 0x00140005, 0x020046a0},
  {WRITE, PHY, 0x00140006, 0x20006c2b},
  {WRITE, PHY, 0x00140007, 0xc0aa0060},
  {WRITE, PHY, 0x0014000b, 0x80040000},
  {WRITE, PHY, 0x00140001, 0x00000073},
  // phy init
  {READ , PHY, 0x0014000d, 0x8000000f},
  // phy SDRAM config
  {WRITE, PHY, 0x00140001, 0x00040001},
  // phy SDRAM init
  {READ , PHY, 0x0014000d, 0x8000001f},
  // mc SDRAM config
  {WRITE, MC,  0x001301b0, 0x00000041},
  {WRITE, MC,  0x00130320, 0x00000001},
  // mc SDRAM init(!!!!!!)
  {READ , MC,  0x00130004, 0x00000001},  // this cannot pass
  // mc SDRAM config reset
  {WRITE, MC,  0x00130320, 0x00000000},
  {WRITE, MC,  0x00130060, 0x00000001},
  {WRITE, MC,  0x001301b0, 0x00000040},
  {WRITE, MC,  0x00130320, 0x00000001},
  {WRITE, MC,  0x00130010, 0x00001010},
  {WRITE, MC,  0x00130014, 0x00000181},
  {WRITE, MC,  0x00130010, 0x80001010},
  // write leveling config
  {WRITE, PHY, 0x001400c5, 0x000000ff},
  {WRITE, PHY, 0x00140137, 0x00000000},
  {WRITE, PHY, 0x00140026, 0x00010000},
  {WRITE, PHY, 0x00140001, 0x00000201},
  // write leveling training
  {READ , PHY, 0x0014000d, 0x8000003f},
  // write leveling config reset
  {WRITE, MC,  0x00130010, 0x00001010},
  {WRITE, MC,  0x00130014, 0x00000101},
  {WRITE, MC,  0x00130010, 0x80001010},
  // read & write training config
  {WRITE, PHY, 0x00140001, 0x0002fc01},
  // read & write training
  {READ , PHY, 0x0014000d, 0x80004fff},
  {WRITE, MC,  0x00130320, 0x00000000},
  {WRITE, MC,  0x00130060, 0x00000000},
  {WRITE, MC,  0x00130320, 0x00000001},
  {WRITE, MC,  0x00130490, 0x00000001}
};

void init_ddr(void)
{
    register int i asm ("t0");
    unsigned int rdata;
    for (i = 0; i < sizeof(cmds) / sizeof(DDRCmd); i++) {
        register DDRCmd *p asm ("t1") = &cmds[i];
        unsigned long long addrValue = p->addr;
        if(p->mcPhy==PHY)
          addrValue = (addrValue & 0xffff0000) | (((addrValue & 0x0000ffff) << 2) & 0x0000ffff);
        volatile unsigned int *addr = (unsigned int *)(addrValue);
        if (p->rw == READ) {
            rdata = *addr;
            while(rdata != p->data) // LSR = 0x1, data ready
            {
              rdata = *addr;
            }
        }
        else {
            *addr = p->data;
        }
    }

    //write_csr(0x800, 1);
}

